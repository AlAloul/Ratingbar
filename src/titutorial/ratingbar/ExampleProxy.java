/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package titutorial.ratingbar;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.RatingBar.OnRatingBarChangeListener;


// This proxy can be created by calling Ratingbar.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=RatingbarModule.class)
public class ExampleProxy extends TiViewProxy
{
	private int rating;
	private int stars;
	private boolean isIndicator;
	private String style;
	//private double stepSize;
	// Standard Debugging variables
	private boolean hasListenerChange = false;
	private static final String TAG = "ExampleProxy";
	RatingBar rb1;
	
	private class ExampleView extends TiUIView
	{
		public ExampleView(final TiViewProxy proxy) {
			super(proxy);
			hasListenerChange = proxy.hasListeners("change");
			if(style.equalsIgnoreCase("small")){
				rb1 = new RatingBar(proxy.getActivity(), null, 16842877);
			}else{
				rb1 = new RatingBar(proxy.getActivity());
			}
				
			rb1.setRating(rating);
			rb1.setNumStars(stars);
			rb1.setIsIndicator(isIndicator);
			rb1.setFocusable(false);
			//Log.d("@@##", "rb stepSize = "+stepSize);
			//rb1.setStepSize((float) stepSize);
			
			rb1.setOnRatingBarChangeListener(new OnRatingBarChangeListener() {

				@SuppressWarnings("deprecation")
				public void onRatingChanged(RatingBar ratingBar, float rating,	boolean fromUser) {
					if(hasListenerChange){
						KrollDict props = new KrollDict();
						props.put("rating", rating);
						proxy.fireEvent("change", props);
					}
					Log.d("rating", "rating vale = "+rating);

				}
			});
			
			RelativeLayout relativeLayout = new RelativeLayout(proxy.getActivity());
			relativeLayout.addView(rb1);
			setNativeView(relativeLayout);
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}

	// Constructor
	public ExampleProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new ExampleView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("rating")) {
			Log.d("@@##", "obj rating vale = "+options.get("rating"));
			rating = (Integer) options.get("rating");
		}
		
		if (options.containsKey("stars")) {
			Log.d("@@##", "obj stars vale = "+options.get("stars"));
			stars = (Integer) options.get("stars");
		}
		
		if (options.containsKey("isIndicator")) {
			Log.d("@@##", "obj isIndicator vale = "+options.getBoolean("isIndicator"));
			isIndicator = (Boolean) options.getBoolean("isIndicator");
		}
		
		if (options.containsKey("style")) {
			Log.d("@@##", "obj style vale = "+options.getString("style"));
			style = (String) options.getString("style");
		}
		/*
		if (options.containsKey("stepSize")) {
			Log.d("@@##", "obj2 stepSize vale = "+options.getDouble("stepSize"));
			stepSize = (Double) options.get("stepSize");
		}
		*/
		
		if (options.containsKey("message")) {
			Log.d(TAG, "example created with message: " + options.get("message"));
		}
	}
	
	// Methods
	@Kroll.method
	public void printMessage(String message)
	{
		Log.d(TAG, "printing message: " + message);
	}

	@Kroll.setProperty @Kroll.method
	public void setRating(int val)
	{
		rating = val;
	}

	@Kroll.getProperty @Kroll.method
	public int getRating()
	{
		return rating;
	}

	@Kroll.setProperty @Kroll.method
	public void setIsIndicator(boolean val)
	{
		isIndicator = val;
	}

	@Kroll.getProperty @Kroll.method
	public boolean getIsIndicator()
	{
		return isIndicator;
	}
	

	@Kroll.setProperty @Kroll.method
	public void setStars(int val)
	{
		stars = val;
	}

	@Kroll.getProperty @Kroll.method
	public int getStars()
	{
		return stars;
	}

	@Kroll.setProperty @Kroll.method
	public void setStyle(String val)
	{
		style = val;
	}

	@Kroll.getProperty @Kroll.method
	public String getStyle()
	{
		return style;
	}
	/*
	@Kroll.setProperty @Kroll.method
	public void setStepSize(double val)
	{
		stepSize = val;
	}

	@Kroll.getProperty @Kroll.method
	public double getStepSize()
	{
		return stepSize;
	}
	*/
	
	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.d(TAG, "Tried setting module message to: " + message);
	}
}